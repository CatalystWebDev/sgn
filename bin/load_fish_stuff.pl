#!/usr/bin/perl

=head1 NAME

 load_fish_stuff.pl
 load fish data and images into database

=cut

=head1 SYPNOSIS

 load_fish_stuff.pl -i fishlist -t -D database -H host -I image_dir
 
=head2 I<Flags:>

=over

=item -i

    B<input>      a list of paths to the *BAC_Locations.csv files that contain the data to be loaded.  This can be generated by 
                  find -name *ocations.csv > fishlist

=item -t                                                                                                                              

    B<test>       test the loading but do not actually put it in the database 

=item -D

    B<database>   the database where the fish data will be loaded

=item -H

    B<host>

=item -I

    B<image_dir>  the directory to store the images  

=back

=cut

=head1 DESCRIPTION

 This script loads fish data and images.  The columns in the csv files are expected to be in the following comma-delimited order:

    BAC_ID number,Photo_ID,SC_ID,SC_rel_len%,SC_AR,BAC_loc_arm,BAC%from_kc

 Make sure to set DBHOST, DBNAME, DBUSER, and DBPASS accordingly.  Also, check dir that images are stored.

=cut

=head1 AUTHORS

    Lukas Mueller and Suzy Strickler

=cut

=head1 METHODS

 load_fish_stuff.pl


=cut


use strict;
use File::Slurp;
use Getopt::Std;
use File::Basename;
use CXGN::DB::InsertDBH;
use CXGN::Genomic::Clone;
use CXGN::Image;

our ($opt_i, $opt_D, $opt_H, $opt_I, $opt_t, $opt_h);

getopts('i:D:H:I:th');

if (!$opt_i && !$opt_D && !$opt_H && !$opt_I && !$opt_t && !$opt_h){
    print "Wrong script usage. Printing help\n\n";
    help();
}

if ($opt_h) {
    help();
}

#Get dir to store images
my $image_dir = $opt_I || die("INPUT ERROR: Image directory was not supplied (-I </dir/>).\n");

#list of all "Locations.csv" files ex: 01-26-12/Tomato_10P/Tomato_10P_BAC_Locations.csv                                                
my $master_file = $opt_i || die("INPUT ERROR: Input option was not supplied (-i <fish_list>).\n");
my @files = read_file($master_file);

our $dbh = CXGN::DB::InsertDBH->new(
    {
        dbname=>$opt_D,
        dbhost=>$opt_H,
        dbargs => {AutoCommit => 0,
                   RaiseError => 1}
    }) ;

###To Add:check for duplicates in file to be loaded

foreach my $file (@files) { 
    chomp $file;

    my $path = dirname($file); #path will now be determined from csv file
    my @fishinfo = read_file($file);
    
    foreach my $fi (@fishinfo) { 
	my $lib;

	if ($fi =~ m/^"/ || $fi =~ m/^,/){
            next;     #should check that it is in this order: BAC ID number, etc                                                     
	}
	
    	else {
	    if ($fi =~ m/SL_EcoRI/i || $fi =~ m/SL_s/i || $fi =~ m/SL_MboI/i || $fi =~ m/SL_FOS/i){
		$lib = '';
	    }

	    else {
		$lib = "LE_HBA";
	    }
	    
	    my ($bac_id, $photo_id, $sc_id, $sc_rel_len, $sc_ar, $bac_loc_arm, $per_from_kin) = split (/,/, $fi); 
                      #$sc_rel_len and $sc_ar are not loaded
       
	    my $clone_id = CXGN::Genomic::Clone->retrieve_from_clone_name("$lib$bac_id");
	    
	    if (!$clone_id) { 
		print STDERR "$lib$bac_id not found. Skipping!!!\n";
		next; 
	    }
	    
	    my @images = '';
	    @images = glob("$path/*$bac_id/Photo_ID_$photo_id/*.jpg");
	    my $num_images = @images;

	    #Check that there are 3 image files in the directory
	    if ($num_images != 3){
		print STDERR "Images in $path associated with experient $photo_id are missing. SKIPPING!\n";
		next;
	    }

	    else {

		my $fish_result_id;
		
		$bac_loc_arm =~ tr/sSlL/PPQQ/;
	    
		print STDERR "\n\nFound clone_id $clone_id for experiment $photo_id on $sc_id $bac_loc_arm at $per_from_kin\n".(join "\n",@images)."\n";
		if ($opt_t) { next;}
		
		eval { 
		    $fish_result_id = insert_fish_result(
			{ 
			    dbh => $dbh,
			    chromo_num => $sc_id,
			    chromo_arm => $bac_loc_arm,
			    experiment_name => $photo_id,
			    percent_from_centromere => $per_from_kin / 100,  # in the db, stored as 0..1
			    fish_experimenter_name => 'fish_stack',  
			    clone_id => $clone_id,
			}
			);
		    
		    print "this is fish result id " . $fish_result_id . "\n";
		    
		    my $image_id;
		    
		    foreach my $image(@images) { 
			my $i = CXGN::Image->new(dbh=>$dbh, image_dir=>$image_dir);                          #'/data/prod/public/images/image_files');
			if ($i->process_image($image, "fish", $fish_result_id)) { 
			    $i->set_description("FISH Localization of $bac_id on chromosome $sc_id arm $bac_loc_arm at $per_from_kin");
			    $i->set_sp_person_id(233);
			    $i->set_obsolete('f');
			    $i->store();
			    $image_id = $i->get_image_id();
			    
			    insert_fish_result_image($fish_result_id, $image_id);
			}
			
			else { 
			    print "Could not store image $image. Skipping!!!\n";
			}
		    }    
		};
		
		if ($@) { 
		    $dbh->rollback();
		    print STDERR "Saving of $bac_id, chr $sc_id arm $bac_loc_arm at dist $per_from_kin failed due to $@";
		}
		
		else { 
		    print STDERR "Committing info for $sc_id.\n";
		    $dbh->commit();
		}
	    }
	}
    }
}

sub insert_fish_result { 
    my $fd = shift;
    
    #Check if record is already in database
    my $check_dup_query = "SELECT * FROM sgn.fish_result WHERE clone_id = ? AND experiment_name = ?";
    my $cdq = $dbh->prepare($check_dup_query);

    $cdq->execute(
	$fd->{clone_id},
	$fd->{experiment_name}
	);

   my $rows = $cdq->rows();

    #Insert the record if it is not already in database
    if ($rows != 0){
	print STDERR "This record " . $fd->{experiment_name} . " is already in database.  SKIPPING\n";
	next;
    }

    else {
	my $result_insert_query =        #fish_result is table name
	    "INSERT INTO sgn.fish_result         
          (chromo_num, chromo_arm,
           experiment_name, percent_from_centromere,
           clone_id, fish_experimenter_id, map_id)
          SELECT ?, ?, ?, ?, ?,              
                 (SELECT fish_experimenter_id 
                    FROM sgn.fish_experimenter 
                   WHERE fish_experimenter_name = ?),
                 (SELECT map_id
                    FROM sgn.map
                   WHERE short_name = 'Tomato FISH map')";
	my $dbh = $fd->{dbh};
	my $sth = $dbh->prepare($result_insert_query);

	print STDERR "name=" . $fd->{experiment_name} . "\n";    
	$sth->execute(                                         #This is the data inserted for the ? in the sql above
	    $fd->{chromo_num},
	    $fd->{chromo_arm},
	    $fd->{experiment_name},
	    $fd->{percent_from_centromere},
	    $fd->{clone_id},
	    $fd->{fish_experimenter_name},
	    );
	
	my $frh = $dbh->prepare("select currval('fish_result_fish_result_id_seq')");
	$frh->execute();
	my ($fish_result_id) = $frh->fetchrow_array();
	
	return $fish_result_id;
    }
}

sub insert_fish_result_image { 
    my $fish_result_id = shift;
    my $image_id = shift;
    print STDERR "This is the image id " .  $image_id . "\n";

    my $q = "INSERT INTO fish_result_image (fish_result_id, image_id) VALUES (?,?)";
    my $frih = $dbh->prepare($q);
    $frih->execute($fish_result_id, $image_id);
    
}


=head2 help

  Usage: help()
  Desc: print help
  Ret: none
  Args: none
  Side_Effects: exit of the script
  Example: if (!@ARGV) {
               help();
           }

=cut

sub help {
    print STDERR <<EOF;
    $0:

    Description:

    This script loads fish data and images into the database. 

    Usage:
     
    load_fish_stuff.pl [-h] -i fish_list -t test -D database -H host -I image_dir
      
    Examples:

    load_fish_stuff.pl -i fish_list.csv -t -D sandbox -H localhost -I /data/prod/public/images/image_files_sandbox

    Flags:

    -i <input>                    input list of locations of fish csv files
    -t <test>                     test mode, does not actually load data 
    -D <database>                 the database to load the fish data
    -H <host>
    -I <image_dir>                the directory to store the images
    
EOF
exit (1);
}
