
<%doc>

=head1 NAME

/cview/map/index.mas - a Mason component to display top level map web page

=head1 DESCRIPTION

This Mason component displays a web page with an overview graph of a map, an abstract and some statistics about the map, using map_id or map_version_id as a parameter. 

This component is based on older Perl scripts that accepted other parameters, such as the mysterious legacy_id or the more cumbersome map short name, and a 'physical' parameter that then somehow displayed a physical map. Support for these has been scrapped. Sorry!

On the other hand, a new parameter was added, called "force", which, if set to true, will force the cached images and stats to be re-calculated. Normally, the map overview image and associated image map and the map statistics are cached.

Parameters summary:

=over 15

=item dbh

a database handle

=item map_id

The map_id of the map to display.

=item map_version_id

the map_version_id of the map to display. Note that map_id and map_version_id are mutually exclusive.

=item hilite

a space separated, url-encoded string that gives the markers to be highlighted.

=item size

the size of the map to display. 0 denotes the standard size (smallest), 10 denotes the largest size.

=item map_items

items to add to the map, as a multi-line string with chr offset name

=item referer

the page (uri + args) that this component is called from (to be able to construct links back from the page comment feature)

=item basepath

the basepath of the installation

=item force

if set to true, force the image and map stats caches to be re-calculated.

=back

=head1 AUTHORS

Adapted to Mason by Lukas Mueller. Early Perl-only versions were written by Robert Ahrens, with later additions by Lukas Mueller and John Binns <zombieite@gmail.com>.

Currently maintained by Lukas Mueller <lam87\@cornell.edu>.

=cut

</%doc>

<%args>
$dbh
$map_id
$map_version_id
$hilite => undef
$size => 1
$map_items
$force
$physical
$referer
$tempdir
$basepath
</%args>

<%perl>
use Cache::File;
use File::Spec;
use CXGN::Cview::MapFactory;
use CXGN::Cview::Map::Tools;
use CXGN::Phenome::Population;
use CXGN::People::Person;
use CXGN::Login;
use CXGN::Map;

my %marker_info;

# set up a cache for the map statistics, using Cache::File
#
my $cache_file_dir = File::Spec->catfile($basepath, $tempdir, "cache_file");

tie %marker_info, 'Cache::File', { cache_root => $cache_file_dir };

# report some unusual conditions to the user.
#
my $message = ""; 

# maintain some backwards compatibility. The physical parameter is deprecated, but
# we still support it...
#
if ($physical==1) { $map_id= "p".$map_id; }

# if the map_id was supplied, convert immediately to map_version_id
#
if ($map_id && !$map_version_id) { 
    $map_version_id = CXGN::Cview::Map::Tools::find_current_version($dbh, $map_id);
}

# get the map data using the CXGN::Map API.
#
my $map_factory = CXGN::Cview::MapFactory->new($dbh);
my $map = $map_factory ->create({ map_version_id => $map_version_id });

if (!$map) { missing_map_page(); return; }

my $private = data_is_private($dbh, $map_version_id);
 
my $map_fullname = $map->get_long_name();
my $short_name   = $map->get_short_name();

my @hilite_markers = split /\s+|\,\s*|\;s*/, $hilite;

sub missing_map_page { 

   
  my $title = "<h1>The requested map could not be found</h1>";
    
    print <<HTML;

    $title

    <p>
    All available maps on SGN are listed on the <a href="/cview/">map index page</a>.
    </p>
    <p>
    Please contact <a href="mailto:sgn-feedback\@sgn.cornell.edu">SGN</a> if you think there is a problem.
    </p>


HTML


}

sub data_is_private {     
    my $dbh = shift;
    my $map_version_id = shift;
    
    if ($map_version_id!~/^\d+$/) { return ''; }
    my $genetic_map = CXGN::Map->new($dbh, { map_version_id=>$map_version_id}); 
    my $pop_id = $genetic_map->get_population_id();
    my $pop = CXGN::Phenome::Population->new($dbh, $pop_id);
    my $is_public = $pop->get_privacy_status();
    
    my ($login_id, $user_type) = CXGN::Login->new($dbh)->has_session();
    
    print STDERR "$is_public\n";
    
    if ($is_public ||             
	    $user_type eq 'curator' || 
	    $login_id == 
	$pop->get_sp_person_id() 
       )  {
      return undef;
    } 
    else {
      
	   my $owner_id = $pop->get_sp_person_id(); 
    

	   my $submitter = CXGN::People::Person->new($dbh, $owner_id);
    	   my $submitter_name = $submitter->get_first_name()." ".$submitter->get_last_name();
    	   my $submitter_link = qq |<a href="/solpeople/personal-info.pl?sp_person_id=$owner_id">$submitter_name</a> |;
       
	   my $private = qq | <p>This genetic map is not public yet. 
       	              If you would like to know more about this data, 
                      please contact the owner of the data: <b>$submitter_link</b> 
                      or email to SGN:
                      <a href=mailto:sgn-feedback\@sgn.cornell.edu>
                      sgn-feedback\@sgn.cornell.edu</a>.
                    </p> |;

         return $private;
	 } 
    
}

# Historic Perl comment by Robert Ahrens, ca. 2003
#
# sub hack_abstract ($$$) {    
#     # Look.  This is a total hack and that's that.  Let's make no
#     # bones about it. There is doubtlessly a good way to handle this,
#     # but in the meantime this sub will allow us to swap in a decent
#     # abstract for the physical mapping project w/o having to redesign
#     # code.
#     my ($abstract, $map, $physical) = @_;

</%perl>

<& /page/page_title.mas, title=> $short_name &>

<div id="pagetitle2"><center><h3><%$map_fullname%></h3></center></div>

% if ($private) {
% print $private;
%} 
%else {

<& /cview/map/overview.mas, 
  dbh => $dbh, 
  map => $map, 
  size => $size,  
  hilite_markers => [ @hilite_markers ], 
  map_items=> $map_items, 
  basepath => $basepath, 
  tempdir => $tempdir 
&>

% if ($message) { 
%    print "<div class=\"boxbgcolor5\"><b>NOTE:</b><br />$message</div>\n";
% }

<& /cview/map/abstract.mas, map => $map &>

<& /cview/map/stats.mas, map => $map &>

<& /page/comments.mas, object_type=>"map", object_id => $map_version_id,  referer => $referer &>

%}

